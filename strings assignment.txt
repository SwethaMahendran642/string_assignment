1) Roman To Integer

class Solution {
    int getval(char ch){
        switch(ch){
            case 'I':return 1;
            case 'V':return 5;
            case 'X':return 10;
            case 'L':return 50;
            case 'C':return 100;
            case 'D':return 500;
            case 'M':return 1000;
            default:return 0;
        }
    }
    public int romanToInt(String s) {
        int sum = 0;
        for(int i=0;i<s.length();i++){
            if((i+1)<s.length() && getval(s.charAt(i))<getval(s.charAt(i+1))){
                sum = sum-getval(s.charAt(i));
            }else{
                sum=sum+getval(s.charAt(i));
            }
        }
        return sum;
    }
}

2)Longest Common Prefix

class Solution {
    public String longestCommonPrefix(String[] strs) {
        

        Arrays.sort(strs);
        String first = strs[0];
        String last = strs[strs.length - 1];
        StringBuilder ans = new StringBuilder();
        int i = 0;

        while(i < Math.min(first.length(), last.length()) && first.charAt(i) == last.charAt(i)) {
            ans.append(first.charAt(i));
            i++;
        }
        return ans.toString();
    }
}

3)Valid Palindrome

class Solution {
    public boolean isPalindrome(String s) {
        s = s.toLowerCase();
        int len=0;
        for(int i=0; i<s.length(); i++){
        if(s.charAt(i)>='a' && s.charAt(i)<='z' || s.charAt(i)>='0'&& s.charAt(i)<='9'){
            len++;
        }
      }
        char[] str = new char[len];
        int k=0;
        for(int i=0; i<s.length(); i++){
            if(s.charAt(i)>='a' && s.charAt(i)<='z' || s.charAt(i)>='0'&& s.charAt(i)<='9'){
                str[k++] = s.charAt(i); 
            }
        }

      int i = 0;
      int j = len-1;
      while(i<=j){
          if(str[i]!=str[j]){
              return false;
          }else{
              i++;j--;
          }
      }
      return true;
    }
}

4)Valid Anagram
class Solution {
    public boolean isAnagram(String s, String t) {
        int[] alphabet = new int[26];
        for(char c : s.toCharArray()) {
            alphabet[c - 'a']++;
        }
        for(char c: t.toCharArray()) {
            alphabet[c - 'a']--;
            if(alphabet[c - 'a']< 0) return false;
        }
        for(int i = 0; i < alphabet.length; i++) {
            if(alphabet[i] != 0) {
                return false;
            }
        }
        return true;
    }
}

5)Reverse words in a string
class Solution {
    public String reverseWords(String s) {
        String[] words= s.split(" +");
        StringBuilder sb=new StringBuilder();
        for(int i=words.length-1;i>=0;i--){
            sb.append(words[i]);
            sb.append(" ");

        }
        return sb.toString().trim();

    }
}

6)count and say
class Solution {
    public String countAndSay(int n) {
        if(n==1)
        {
            return "1";
        }
        if(n==2)
        {
            return "11";
        }
        StringBuilder nm=new StringBuilder();
        nm.append("11");
        for(int i=3;i<=n;i++)
        {
            StringBuilder kk=new StringBuilder();
            task(nm.toString(),kk);
            nm.setLength(0);
            nm.append(kk);
        }
        return nm.toString();
    }
    public void task(String s, StringBuilder nm)
    {
        int count=1;
        for(int i=0;i<s.length()-1;i++)
        {
            if(s.charAt(i) == s.charAt(i+1))
            {
                count++;
            }
            else
            {
                nm.append(count);
                nm.append(s.charAt(i));
                count=1;
            }
        }
        nm.append(count);
        nm.append(s.charAt(s.length()-1));
    }
}
